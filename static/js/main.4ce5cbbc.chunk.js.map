{"version":3,"sources":["reportWebVitals.js","utils/selectors.js","utils/fonts/Avenir-Heavy/Avenir-Heavy.ttf","utils/style/color.js","utils/style/GlobalStyle.jsx","utils/style/mediaQuery.js","components/HeroBanner.js","components/Features.js","assets/bank-tree.jpeg","assets/icon-money.png","assets/icon-chat.png","assets/icon-security.png","pages/HomePage.js","components/Input.js","components/LoadSpinner.js","components/Button.js","utils/config/config.js","features/authentication.js","components/LoginForm.js","pages/LoginPage.js","features/profile.js","components/AccountCard.js","components/Modal.js","components/EditProfileModal.js","pages/ProfilePage.js","assets/argentBankLogo.png","components/MainNav.js","components/Header.js","components/Footer.js","components/App.js","_mocks/mockedData.js","_mocks/handlers.js","_mocks/browser.js","utils/store.js","index.jsx"],"names":["reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","selectAuthentication","state","authentication","selectProfile","profile","colors","primary","secondary","tertiary","primaryLight","backgroundLight","backgroundDark","redDark","StyledGlobalStyle","createGlobalStyle","AvenirHeavy","GlobalStyle","mediaQuery","breakpoints","mobile","value","tablet","desktop","Object","keys","map","bp","max","css","min","HeroBannerContainer","styled","div","props","backgroundImage","HeroContent","section","HeroTitle","h2","HeroSubtitle","p","HeroTextContent","HeroBanner","heroTitle","heroBackgroundImage","heroSubtitlesList","heroTextContent","backgroundColor","className","display","title","length","textSubtitle","index","FeaturesContainer","FeaturesTitle","FeatureItem","FeatureItemIcon","img","FeatureItemTitle","h3","FeatureItemText","Features","featuresTitle","featuresData","featureItem","src","image","alt","text","key","HomePage","chatIcon","moneyIcon","securityIcon","banktreeImage","InputContainer","type","InputLabel","label","InputElement","input","isInvalid","InputInvalidText","span","Input","inputId","inputType","inputName","inputLabel","inputEvents","inputDefaultValue","inputValue","isInvalidText","inputPlaceholder","isRequired","disabled","htmlFor","id","name","onChange","onClick","defaultValue","defaultChecked","autoComplete","placeholder","required","defaultProps","LoadSpinnerContainer","AnimBars","keyframes","LoadSpinnerWrapper","sizeRatio","colorOfBars","animationSpeed","styles","animationDelay","i","numberOfBars","createCSS","LoadSpinner","Array","x","StyledButton","button","buttonBackgroundImage","Button","buttonType","buttonText","buttonValue","isLoading","apiUrl","userLoggedIn","JSON","parse","localStorage","getItem","resetState","status","error","username","token","initialState","login","password","remember","dispatch","getState","a","actions","loginRunning","Promise","r","setTimeout","axios","post","email","timeout","response","data","loginSuccess","setItem","stringify","body","errorMessage","message","loginFailed","createSlice","reducers","draft","action","payload","logout","reducer","LoginFormContainer","form","SignInButton","LoginForm","useState","inputs","setInputs","submitted","setSubmitted","history","useHistory","useDispatch","useSelector","handleChangeText","e","target","preventDefault","push","useEffect","isPasswordNotSpecified","isPasswordInvalid","isInputPasswordInvalid","isUsernameNotSpecified","isUsernameInvalid","isInputUsernameInvalid","onSubmit","checked","style","position","LoginPageContent","main","LoginPageContainer","LoginPageTitle","h1","LoginIcon","FontAwesomeIcon","LoginErrorContainer","LoginErrorIcon","LoginErrorMessage","LoginPage","icon","faFrown","faUserCircle","userProfileLoggedIn","user","firstName","lastName","editedProfile","updateUserProfile","updating","put","headers","Authorization","updated","updateFailed","running","success","failed","newUpdate","AccountCardContainer","AccountContentWrapper","AccountAmount","AccountAmountDescription","AccountTitle","AccountButtonTransaction","AccountCard","accountNumber","accountTitle","accountAmount","accountCurrency","accountDescription","slice","toLocaleString","ModalContainer","displayModal","ModalContent","ModalHeader","ModalTitle","ModalBody","Modal","children","onClose","ReactDOM","createPortal","stopPropagation","document","getElementById","ModalButton","FormEditProfile","FormButtonsContainer","ModalConfirmMessage","IconConfirmMessage","EditProfileModal","initialStateNewProfile","Date","now","newFirstName","newLastName","newProfile","setNewProfile","currentFirstName","currentLastName","displayConfirmMessage","setDisplayConfirmMessage","noChanges","isUpdating","closeModalAndReset","onReset","noValidate","faInfoCircle","size","color","faCheckCircle","faTimesCircle","ProfilePageContent","loading","ProfilePageHeader","EditButton","accountData","number","amount","currency","description","ProfilePage","_id","displayEditProfileModal","setDisplayEditProfileModal","elt","HomeLogo","StyledLink","Link","Icon","NavContainer","nav","LinkContainer","MainNav","logoutUser","removeItem","logoutProfile","to","logo","faSignOutAlt","Header","FooterContainer","footer","Footer","getFullYear","App","exact","path","from","users","handlers","rest","req","res","ctx","ctxStatus","ctxJSON","find","jwt","sign","process","REACT_APP_SECRET_KEY","expiresIn","delay","json","validateToken","getUserProfile","userToken","_headers","authorization","split","trim","verify","console","log","next","jwtToken","decodedJwtToken","decode","setupWorker","store","configureStore","authenticationReducer","profileReducer","render","StrictMode"],"mappings":"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","file":"static/js/main.4ce5cbbc.chunk.js","sourcesContent":["const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","export const selectAuthentication = (state) => state.authentication\n\nexport const selectProfile = (state) => state.profile\n","export default __webpack_public_path__ + \"static/media/Avenir-Heavy.f728da1a.ttf\";","const colors = {\n    primary: '#42b983',\n    secondary: '#2c3e50',\n    tertiary: '#222',\n    primaryLight: '#00bc77',\n    backgroundLight: '#ccc',\n    backgroundDark: '#12002b',\n    redDark: '#D50000',\n}\n\nexport default colors\n","import { createGlobalStyle } from 'styled-components'\nimport AvenirHeavy from \"../fonts/Avenir-Heavy/Avenir-Heavy.ttf\";\nimport colors from './color'\n\n// GlobalStyle component to manage the style used for all the App\n\nconst StyledGlobalStyle = createGlobalStyle`\n    @font-face {\n        font-family: 'Avenir';\n        src: url(${AvenirHeavy}) format('ttf'),\n    }\n\n    *, *:before, *:after {\n        padding: 0;\n        margin: 0;\n        box-sizing: inherit;\n    }\n    \n    html {\n        font-family: Avenir, Helvetica, Arial, sans-serif;\n        -webkit-font-smoothing: antialiased;\n        -moz-osx-font-smoothing: grayscale;\n        text-align: center;\n        color: ${colors.secondary};\n    }\n    \n    body {\n        margin: 0;\n        display: flex;\n        flex-direction: column;\n        min-height: 100vh;\n    }\n\n    a {\n        text-decoration: none;\n      }\n\n    .sr-only {\n        border: 0 !important;\n        clip: rect(1px, 1px, 1px, 1px) !important; /* 1 */\n        -webkit-clip-path: inset(50%) !important;\n        clip-path: inset(50%) !important; /* 2 */\n        height: 1px !important;\n        margin: -1px !important;\n        overflow: hidden !important;\n        padding: 0 !important;\n        position: absolute !important;\n        width: 1px !important;\n        white-space: nowrap !important; /* 3 */\n    }\n\n    main {\n        flex: 1;\n    }\n\n    h1 {\n        display: block;\n        font-size: 2em;\n        margin-block-start: 0.67em;\n        margin-block-end: 0.67em;\n        margin-inline-start: 0px;\n        margin-inline-end: 0px;\n        font-weight: bold;\n    }\n\n    h3 {\n        display: block;\n        font-size: 1.17em;\n        margin: 1em 0;\n        font-weight: bold;\n    }\n\n    #root {\n        margin: 0;\n        display: flex;\n        flex-direction: column;\n        min-height: 100vh;\n    }\n`\n\nexport default function GlobalStyle() {\n  return <StyledGlobalStyle />\n}\n","import { css } from 'styled-components'\n\n// MediaQuery rules for apply different style on styled components for responsive design\n\nlet mediaQuery = {\n    breakpoints: {\n        mobile: { value: 450 },\n        tablet: { value: 720 },\n        desktop: { value: 920 },\n    },\n}\n\nmediaQuery.max = {}\nObject.keys(mediaQuery.breakpoints).map((bp) => {\n    mediaQuery.max[bp] = (...args) => css`\n        @media only screen and (max-width: ${mediaQuery.breakpoints[bp].value /\n            16}em) {\n            ${css(...args)}\n        }\n    `\n})\n\nmediaQuery.min = {}\nObject.keys(mediaQuery.breakpoints).map((bp) => {\n    mediaQuery.min[bp] = (...args) => css`\n        @media only screen and (min-width: ${mediaQuery.breakpoints[bp].value /\n            16}em) {\n            ${css(...args)}\n        }\n    `\n})\n\nexport default mediaQuery\n","import React from 'react'\nimport styled from 'styled-components'\nimport mediaQuery from '../utils/style/mediaQuery'\nimport colors from '../utils/style/color'\nimport PropTypes from 'prop-types'\n\nconst HeroBannerContainer = styled.div`\n    background-image: url(${(props) => props.backgroundImage});\n    background-position: 0 -50px;\n    background-size: cover;\n    background-repeat: no-repeat;\n    height: max(300px, 20rem);\n    position: relative;\n\n    ${mediaQuery.min.desktop`\n        height: max(400px, 25rem);\n        background-position: 0% 33%;\n    `}\n`\n\nconst HeroContent = styled.section`\n    position: relative;\n    top: 2rem;\n    width: 200px;\n    background-color: rgba(255, 255, 255, 0.7);\n    border-radius: 10px;\n    padding: 2rem;\n    text-align: left;\n    margin: 0 auto;\n    ${mediaQuery.min.desktop`\n        position: absolute;\n        top: 50px;\n        right: 50px;\n        width: 300px;\n        margin: 2rem;\n    `}\n`\n\nconst HeroTitle = styled.h2`\n    font-weight: bold;\n    font-size: 1.8rem;\n    margin: 0;\n    color: ${colors.primary};\n`\n\nconst HeroSubtitle = styled.p`\n    font-weight: bold;\n    font-size: 1rem;\n    margin: 0;\n    ${mediaQuery.min.desktop`\n        font-size: 1.5rem;\n    `}\n`\n\nconst HeroTextContent = styled.p`\n    margin-bottom: 0;\n    margin-top: 1rem;\n    font-size: 0.9rem;\n    ${mediaQuery.min.desktop`\n        font-size: 1.2rem;\n    `}\n`\n\nexport default function HeroBanner({\n    heroTitle,\n    heroBackgroundImage,\n    heroSubtitlesList,\n    heroTextContent,\n}) {\n    return (\n        <HeroBannerContainer backgroundImage={heroBackgroundImage}>\n            <HeroContent backgroundColor>\n                <HeroTitle className={heroTitle.display ? '' : 'sr-only'}>\n                    {heroTitle.title}\n                </HeroTitle>\n                {heroSubtitlesList &&\n                    heroSubtitlesList.length > 0 &&\n                    heroSubtitlesList.map((textSubtitle, index) => (\n                        <HeroSubtitle key={index}>{textSubtitle}</HeroSubtitle>\n                    ))}\n                {heroTextContent && (\n                    <HeroTextContent>{heroTextContent}</HeroTextContent>\n                )}\n            </HeroContent>\n        </HeroBannerContainer>\n    )\n}\n\nHeroBanner.propTypes = {\n    heroTitle: PropTypes.shape({\n        title: PropTypes.string,\n        display: PropTypes.bool,\n    }),\n    heroBackgroundImage: PropTypes.string,\n    heroSubtitlesList: PropTypes.arrayOf(PropTypes.string),\n    heroTextContent: PropTypes.string,\n}\n","import React from 'react'\nimport styled from 'styled-components'\nimport mediaQuery from '../utils/style/mediaQuery'\nimport colors from '../utils/style/color'\nimport PropTypes from 'prop-types'\n\nconst FeaturesContainer = styled.section`\n    display: flex;\n    flex-direction: column;\n    ${mediaQuery.min.desktop`\n        flex-direction: row;\n    `}\n`\n\nconst FeaturesTitle = styled.h2`\n    font-weight: bold;\n    font-size: 1.8rem;\n    margin: 0;\n    color: ${colors.primary};\n`\n\nconst FeatureItem = styled.div`\n    flex: 1;\n    padding: 2.5rem;\n`\n\nconst FeatureItemIcon = styled.img`\n    width: 100px;\n    border: 10px solid ${colors.primaryLight};\n    border-radius: 50%;\n    padding: 1rem;\n`\n\nconst FeatureItemTitle = styled.h3`\ncolor: ${colors.tertiary};\n  font-size: 1.25rem;\n  font-weight: bold;\n  margin-bottom: 0.5rem;\u0000\n`\nconst FeatureItemText = styled.p``\nexport default function Features({ featuresTitle, featuresData }) {\n    return (\n        <FeaturesContainer>\n            <FeaturesTitle className={featuresTitle.display ? '' : 'sr-only'}>\n                {featuresTitle.title}\n            </FeaturesTitle>\n            {featuresData &&\n                featuresData.length > 0 &&\n                featuresData.map((featureItem) => (\n                    <FeatureItem key={featureItem.key}>\n                        <FeatureItemIcon\n                            src={featureItem.image.src}\n                            alt={featureItem.image.alt}\n                        />\n                        <FeatureItemTitle>{featureItem.title}</FeatureItemTitle>\n                        <FeatureItemText>{featureItem.text}</FeatureItemText>\n                    </FeatureItem>\n                ))}\n        </FeaturesContainer>\n    )\n}\n\nFeatures.propTypes = {\n    featuresTitle: PropTypes.shape({\n        title: PropTypes.string.isRequired,\n        display: PropTypes.bool,\n    }),\n    featuresData: PropTypes.arrayOf(\n        PropTypes.shape({\n            key: PropTypes.string.isRequired,\n            title: PropTypes.string.isRequired,\n            image: PropTypes.shape({\n                src: PropTypes.string.isRequired,\n                alt: PropTypes.string.isRequired,\n            }),\n            text: PropTypes.string.isRequired,\n        })\n    ).isRequired,\n}\n","export default __webpack_public_path__ + \"static/media/bank-tree.4d59987c.jpeg\";","export default __webpack_public_path__ + \"static/media/icon-money.8ec88bb1.png\";","export default __webpack_public_path__ + \"static/media/icon-chat.e238539d.png\";","export default __webpack_public_path__ + \"static/media/icon-security.1c819fa1.png\";","import HeroBanner from '../components/HeroBanner'\nimport Features from '../components/Features'\nimport banktreeImage from '../assets/bank-tree.jpeg'\nimport moneyIcon from '../assets/icon-money.png'\nimport chatIcon from '../assets/icon-chat.png'\nimport securityIcon from '../assets/icon-security.png'\n\nexport default function HomePage() {\n    const heroTitle = 'Promoted Content'\n    const heroSubtitlesList = [\n        'No fees.',\n        'No minimum deposit.',\n        'High interest rates.',\n    ]\n    const heroTextContent = 'Open a savings account with Argent Bank today!'\n\n    const featuresData = [\n        {\n            key: 'feature1',\n            title: 'You are our #1 priority',\n            image: { src: chatIcon, alt: 'Chat Icon' },\n            text: `Need to talk to a representative? You can get in touch through our 24/7 chat or through a phone call in less than 5 minutes.`,\n        },\n        {\n            key: 'feature2',\n            title: 'More savings means higher rates',\n            image: { src: moneyIcon, alt: 'Money Icon' },\n            text: `The more you save with us, the higher your interest rate will be!`,\n        },\n        {\n            key: 'feature3',\n            title: 'Security you can trust',\n            image: { src: securityIcon, alt: 'Security Icon' },\n            text: `We use top of the line encryption to make sure your data and money\n            is always safe.`,\n        },\n    ]\n\n    return (\n        <main className=\"homepage\">\n            <HeroBanner\n                heroTitle={{ title: heroTitle, display: false }}\n                heroBackgroundImage={banktreeImage}\n                heroSubtitlesList={heroSubtitlesList}\n                heroTextContent={heroTextContent}\n            />\n            <Features\n                featuresData={featuresData}\n                featuresTitle={{ title: 'Features', display: false }}\n            />\n        </main>\n    )\n}\n","import React from 'react'\nimport styled from 'styled-components'\nimport PropTypes from 'prop-types'\n\nconst InputContainer = styled.div`\n    display: flex;\n    width: 100%;\n    ${(props) => {\n        if (props.type === 'text' || props.type === 'password') {\n            return `\n                flex-direction: column;\n                text-align: left;\n                margin-bottom: 1rem;\n            `\n        }\n    }}\n`\nconst InputLabel = styled.label`\n    display: flex;\n    font-weight: bold;\n    ${(props) => {\n        if (props.type === 'checkbox') {\n            return `margin-left: 0.25rem;\n            order:2`\n        }\n    }}\n`\n\nconst InputElement = styled.input`\n    ${(props) => {\n        if (props.type === 'text' || props.type === 'password') {\n            return `\n                padding: 5px;\n                font-size: 1.2rem;\n                border-radius: 3px;\n                border: 1px solid grey;\n            `\n        } else if (props.type === 'checkbox') {\n            return `\n                margin: auto 0;\n            `\n        }\n    }}\n    ${(props) => {\n        if (props.isInvalid) {\n            return `\n                color: red;\n                border: 1px solid red;\n                box-shadow: 0px 0px red;\n                z-index: 1;\n                &:focus{ \n                    outline-color: red ;\n                }\n            `\n        }\n    }}\n`\n\nconst InputInvalidText = styled.span`\n    color: red;\n    font-size: 0.8rem;\n    margin-top: 5px;\n`\n\nexport default function Input({\n    inputId,\n    inputType,\n    inputName,\n    inputLabel,\n    inputEvents,\n    inputDefaultValue,\n    inputValue,\n    isInvalid,\n    isInvalidText,\n    inputPlaceholder,\n    isRequired,\n    disabled,\n}) {\n    return (\n        <InputContainer type={inputType}>\n            <InputLabel type={inputType} htmlFor={inputId}>\n                {inputLabel}\n            </InputLabel>\n            <InputElement\n                type={inputType}\n                id={inputId}\n                name={inputName}\n                onChange={inputEvents.onChange}\n                onClick={inputEvents.onClick}\n                defaultValue={inputDefaultValue}\n                inputValue={inputValue}\n                defaultChecked={inputValue}\n                isInvalid={isInvalid}\n                autoComplete=\"on\"\n                placeholder={inputPlaceholder}\n                required={isRequired}\n                disabled={disabled}\n            />\n            {isInvalid && <InputInvalidText>{isInvalidText}</InputInvalidText>}\n        </InputContainer>\n    )\n}\n\nInput.propTypes = {\n    inputId: PropTypes.string.isRequired,\n    inputType: PropTypes.string.isRequired,\n    inputName: PropTypes.string.isRequired,\n    inputLabel: PropTypes.string,\n    inputEvents: PropTypes.shape({\n        onChange: PropTypes.func,\n        onClick: PropTypes.func,\n    }),\n    inputValue: PropTypes.oneOfType([\n        PropTypes.string,\n        PropTypes.number,\n        PropTypes.bool,\n    ]),\n    isInvalid: PropTypes.bool,\n    isInvalidText: PropTypes.string,\n    inputPlaceholder: PropTypes.string,\n}\n\nInput.defaultProps = {\n    inputEvents: {\n        onChange: function () {},\n        onClick: function () {},\n    },\n    isInvalid: false,\n    isInvalidText: 'Invalid value',\n    inputPlaceholder: '',\n}\n","import styled, { keyframes, css } from 'styled-components'\nimport PropTypes from 'prop-types'\n\nconst LoadSpinnerContainer = styled.span`\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n    align-items: center;\n    margin-bottom: 1em;\n    margin-top: 1em;\n    padding: 0.5em;\n`\nconst AnimBars = keyframes`\n    0% {transform: scaleY(0.5);}\n    100% {transform: scaleY(1);}\n`\n\nconst createCSS = (props) => {\n    let styles = ''\n    const animationDelay = 250 / props.animationSpeed || 250\n    for (let i = 1; i <= props.numberOfBars; i += 1) {\n        styles += `\n        .load__bar--${i} {\n            animation-delay: ${animationDelay * i}ms;\n         }\n       `\n    }\n    return css`\n        ${styles}\n    `\n}\n\nconst LoadSpinnerWrapper = styled.span`\n    width: ${(props) => (props.sizeRatio || 1) * 7}em;\n    height: ${(props) => (props.sizeRatio || 1) * 3}em;\n    display: flex;\n    justify-content: space-evenly;\n    & .load__bar {\n        display: block;\n        background-color: ${(props) => props.colorOfBars || 'grey'};\n        border-radius: 5em;\n        height: 100%;\n        width: ${(props) => (props.sizeRatio || 1) * 1}em;\n        animation: ${AnimBars}\n            ${(props) => 1250 / (props.animationSpeed || 1)}ms backwards\n            infinite ease-in-out alternate;\n    }\n    ${(props) => createCSS(props)}\n`\n\nexport default function LoadSpinner({\n    colorOfBars,\n    numberOfBars,\n    sizeRatio,\n    animationSpeed,\n}) {\n    return (\n        <LoadSpinnerContainer>\n            <LoadSpinnerWrapper\n                colorOfBars={colorOfBars}\n                sizeRatio={sizeRatio}\n                numberOfBars={numberOfBars}\n                animationSpeed={animationSpeed}\n            >\n                {[...Array(numberOfBars)].map((x, i) => (\n                    <span\n                        key={i + 1}\n                        className={`load__bar load__bar--${i + 1}`}\n                    />\n                ))}\n            </LoadSpinnerWrapper>\n        </LoadSpinnerContainer>\n    )\n}\n\nLoadSpinner.propTypes = {\n    colorOfBars: PropTypes.string,\n    numberOfBars: PropTypes.number,\n    sizeRatio: PropTypes.number,\n    animationSpeed: PropTypes.number,\n}\n\nLoadSpinner.defaultProps = {\n    colorOfBars: 'grey',\n    numberOfBars: 5,\n    sizeRatio: 1,\n    animationSpeed: 1,\n}\n","import React from 'react'\nimport styled from 'styled-components'\nimport colors from '../utils/style/color'\nimport PropTypes from 'prop-types'\nimport LoadSpinner from '../components/LoadSpinner'\n\nexport const StyledButton = styled.button`\n    display: flex;\n    justify-content: space-around;\n    align-items: center;\n    border-color: ${colors.primaryLight};\n    border: none;\n    background-color: ${colors.primaryLight};\n    color: white;\n    cursor: pointer;\n    text-decoration: underline;\n    border-radius: 3px;\n    position: relative;\n    ${(props) => {\n        if (props.buttonBackgroundImage) {\n            return `\n            background-image: url(${props.buttonBackgroundImage});\n            background-repeat: no-repeat;\n            background-size: 13%;\n            background-position: center;\n            `\n        }\n    }}\n    transition-duration: 0.4s;\n    overflow: hidden;\n    &:after {\n        content: '';\n        background: ${colors.primaryLight};\n        display: block;\n        position: absolute;\n        padding-top: 300%;\n        padding-left: 350%;\n\n        opacity: 0;\n        transition: all 0.6s;\n    }\n\n    &:active:after {\n        padding: 0;\n        margin: 0;\n        opacity: 0.5;\n        filter: brightness(120%);\n        transition: 0s;\n    }\n`\n\nexport default function Button({\n    buttonType,\n    buttonText,\n    buttonBackgroundImage,\n    buttonValue,\n    isLoading,\n    className,\n    onClick,\n}) {\n    return (\n        <StyledButton\n            className={className}\n            type={buttonType}\n            buttonBackgroundImage={buttonBackgroundImage}\n            onClick={onClick}\n            value={buttonValue}\n        >\n            {isLoading ? (\n                <LoadSpinner\n                    colorOfBars={'white'}\n                    numberOfBars={4}\n                    sizeRatio={0.4}\n                    animationSpeed={6}\n                />\n            ) : (\n                buttonText\n            )}\n        </StyledButton>\n    )\n}\n\nButton.propTypes = {\n    buttonType: PropTypes.string,\n    buttonText: PropTypes.string.isRequired,\n    buttonBackgroundImage: PropTypes.string,\n    isLoading: PropTypes.bool,\n}\n\nButton.defaultProps = {\n    isLoading: false,\n}\n","export const apiUrl = 'http://localhost:3001/api/v1'\n","import { createSlice } from '@reduxjs/toolkit'\nimport { selectAuthentication } from '../utils/selectors'\nimport { apiUrl } from '../utils/config/config'\nimport axios from 'axios'\n\nlet userLoggedIn = JSON.parse(localStorage.getItem('user_loggedIn'))\n\nconst resetState = {\n    status: 'void',\n    error: null,\n    username: null,\n    token: null,\n}\n\nconst initialState = userLoggedIn\n    ? {\n          status: 'success',\n          error: null,\n          username: userLoggedIn.username,\n          token: userLoggedIn.token,\n      }\n    : resetState\n\nexport function login(username, password, remember) {\n    return async (dispatch, getState) => {\n        const status = selectAuthentication(getState()).status\n        if (status === 'running') {\n            return\n        }\n        dispatch(actions.loginRunning(username))\n\n        // Add a sleep delay to show loadSpinner before axios call\n        await new Promise((r) => setTimeout(r, 500))\n\n        try {\n            const response = await axios.post(\n                apiUrl + `/user/login`,\n                {\n                    email: username,\n                    password: password,\n                },\n                { timeout: 5000 }\n            )\n            const data = response.data\n            dispatch(actions.loginSuccess({ username: username, data: data }))\n\n            // if the user has checked remember option on loginForm, informations are stored in localstorage to prevent logout on refresh\n            if (remember) {\n                localStorage.setItem(\n                    'user_loggedIn',\n                    JSON.stringify({\n                        username: username,\n                        token: data.body.token,\n                    })\n                )\n            }\n        } catch (error) {\n            try {\n                const errorMessage = error.response.data.message\n                dispatch(\n                    actions.loginFailed({\n                        username: username,\n                        error: errorMessage,\n                    })\n                )\n            } catch {\n                dispatch(\n                    actions.loginFailed({\n                        username: username,\n                        error: 'Error: Backend is not active',\n                    })\n                )\n            }\n        }\n    }\n}\n\nexport function logout() {\n    return async (dispatch, getState) => {\n        dispatch(actions.logout())\n        localStorage.removeItem('user_loggedIn')\n        localStorage.removeItem('user_profile')\n    }\n}\n\nconst { actions, reducer } = createSlice({\n    name: 'authentication',\n    initialState: initialState,\n    reducers: {\n        loginRunning: (draft, action) => {\n            if (draft.status === 'void' || draft.status === 'success') {\n                draft.username = action.payload\n                draft.status = 'running'\n                return\n            }\n            if (draft.status === 'failed') {\n                draft.username = action.payload\n                draft.error = null\n                draft.status = 'running'\n                return\n            }\n            return\n        },\n        loginSuccess: (draft, action) => {\n            if (draft.status === 'running') {\n                draft.username = action.payload.username\n                draft.token = action.payload.data.body.token\n                draft.status = 'success'\n                return\n            }\n            return\n        },\n        loginFailed: (draft, action) => {\n            if (draft.status === 'running') {\n                draft.username = action.payload.username\n                draft.error = action.payload.error\n                draft.status = 'failed'\n                return\n            }\n            return\n        },\n        logout: () => resetState,\n    },\n})\n\nexport const { loginRunning, loginFailed, loginSuccess } = actions\n\nexport default reducer\n","import styled from 'styled-components'\nimport Input from './Input'\nimport Button from '../components/Button'\nimport { login } from '../features/authentication'\nimport { useEffect, useState } from 'react'\nimport { useSelector, useDispatch } from 'react-redux'\nimport { selectAuthentication } from '../utils/selectors'\nimport { useHistory } from 'react-router-dom'\n\nconst LoginFormContainer = styled.form``\n\nconst SignInButton = styled(Button)`\n    width: 100%;\n    height: 2.5rem;\n    padding: 8px;\n    font-size: 1.1rem;\n    font-weight: bold;\n    margin-top: 1rem;\n`\nexport default function LoginForm() {\n    // local states for LoginForm component\n    const [inputs, setInputs] = useState({\n        username: '',\n        password: '',\n        remember: true,\n    })\n    const [submitted, setSubmitted] = useState(false)\n    const { username, password, remember } = inputs\n\n    // hook for redirect route\n    let history = useHistory()\n\n    // get Redux state for authentication\n    const dispatch = useDispatch()\n    const authentication = useSelector(selectAuthentication)\n\n    useEffect(() => {\n        // if user is logged redirection to profilePage\n        if (authentication.status === 'success') {\n            history.push('/profile')\n        }\n    }, [authentication.status])\n\n    // function to update states after each changes on inputs username & password\n    function handleChangeText(e) {\n        const { name, value } = e.target\n        setInputs((inputs) => ({ ...inputs, [name]: value }))\n        setSubmitted(false)\n    }\n\n    // function to update state of checkbox inputs after each change on checkbox input\n    function handleChangeCheckbox(e) {\n        const { name } = e.target\n        const checked = e.target.checked\n        setInputs((inputs) => ({ ...inputs, [name]: checked }))\n    }\n\n    // function on submit form : redux state authentication is updated\n    // and route is redirected to Page if success\n    async function handleSubmit(e) {\n        e.preventDefault()\n        setSubmitted(true)\n        if (username && password) {\n            dispatch(login(username, password, remember))\n        }\n        if (authentication.status === 'success') {\n            history.push('/profile')\n        }\n    }\n\n    // constants to manage Invalid Inputs\n    const isPasswordNotSpecified = submitted && !password\n    const isPasswordInvalid =\n        submitted && authentication.error === 'Error: Password is invalid'\n    const isInputPasswordInvalid = isPasswordNotSpecified || isPasswordInvalid\n    const isUsernameNotSpecified = submitted && !username\n    const isUsernameInvalid =\n        submitted &&\n        authentication.error === 'Error: User not found!' &&\n        password\n    const isInputUsernameInvalid = isUsernameNotSpecified || isUsernameInvalid\n\n    return (\n        <LoginFormContainer onSubmit={handleSubmit}>\n            <Input\n                inputType=\"text\"\n                inputId=\"username\"\n                inputLabel=\"Username\"\n                inputName=\"username\"\n                inputValue={username}\n                inputEvents={{ onChange: handleChangeText }}\n                isInvalid={isInputUsernameInvalid}\n                isInvalidText={\n                    isUsernameNotSpecified\n                        ? 'Please enter your username'\n                        : 'This username is unknown'\n                }\n            ></Input>\n            <Input\n                inputType=\"password\"\n                inputId=\"password\"\n                inputLabel=\"Password\"\n                inputName=\"password\"\n                inputValue={password}\n                inputEvents={{ onChange: handleChangeText }}\n                isInvalid={isInputPasswordInvalid}\n                isInvalidText={\n                    isPasswordNotSpecified\n                        ? 'Please enter your password'\n                        : 'Your password is incorrect'\n                }\n            ></Input>\n            <Input\n                inputType=\"checkbox\"\n                inputId=\"remember-me\"\n                inputLabel=\"Remember me\"\n                inputName=\"remember\"\n                inputValue={remember}\n                inputEvents={{ onChange: handleChangeCheckbox }}\n            ></Input>\n            <SignInButton\n                style={{ position: 'relative' }}\n                buttonType=\"submit\"\n                buttonText=\"Sign In\"\n                isLoading={authentication.status === 'running'}\n            />\n        </LoginFormContainer>\n    )\n}\n","import LoginForm from '../components/LoginForm'\nimport styled from 'styled-components'\nimport colors from '../utils/style/color'\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { faUserCircle } from '@fortawesome/free-solid-svg-icons'\nimport { useSelector } from 'react-redux'\nimport { selectAuthentication } from '../utils/selectors'\nimport { faFrown } from '@fortawesome/free-regular-svg-icons'\n\nconst LoginPageContent = styled.main`\n    background-color: ${colors.backgroundDark};\n    display: flex;\n    align-items: center;\n`\nconst LoginPageContainer = styled.section`\n    box-sizing: border-box;\n    background-color: white;\n    width: 300px;\n    margin: 0 auto;\n    margin-bottom: 1rem;\n    padding: 2rem;\n    border-radius: 3px;\n`\n\nconst LoginPageTitle = styled.h1`\n    margin: 0.83em;\n    font-size: 1.5em;\n`\n\nconst LoginIcon = styled(FontAwesomeIcon)`\n    font-size: 3rem;\n`\n\nconst LoginErrorContainer = styled.div`\n    padding: 5rem 0;\n`\n\nconst LoginErrorIcon = styled(FontAwesomeIcon)`\n    font-size: 5rem;\n`\nconst LoginErrorMessage = styled.span`\n    display: block;\n    margin: 2rem 0.5rem;\n    & br {\n        display: block;\n        margin: 5px 0;\n        content: ' ';\n    }\n`\n\nexport default function LoginPage() {\n    const authentication = useSelector(selectAuthentication)\n\n    return (\n        <LoginPageContent>\n            <LoginPageContainer>\n                {\n                    //content displayed if there is an error with backend\n                    authentication.error === 'Error: Backend is not active' ? (\n                        <LoginErrorContainer>\n                            <LoginErrorIcon icon={faFrown} />\n                            <LoginErrorMessage>\n                                Sorry, something went wrong !<br />\n                                You can refresh this page or retry later.\n                            </LoginErrorMessage>\n                        </LoginErrorContainer>\n                    ) : (\n                        // Login Form content\n                        <>\n                            <LoginIcon icon={faUserCircle} />\n                            <LoginPageTitle>Sign In</LoginPageTitle>\n                            <LoginForm />\n                        </>\n                    )\n                }\n            </LoginPageContainer>\n        </LoginPageContent>\n    )\n}\n","import { createSlice } from '@reduxjs/toolkit'\nimport { selectProfile } from '../utils/selectors'\nimport { apiUrl } from '../utils/config/config'\nimport axios from 'axios'\n\nlet userProfileLoggedIn = JSON.parse(localStorage.getItem('user_profile'))\n\nconst resetState = {\n    status: 'void',\n    error: null,\n    user: {\n        id: null,\n        firstName: null,\n        lastName: null,\n    },\n    editedProfile: {\n        firstName: null,\n        lastName: null,\n        status: 'void',\n    },\n}\n\nconst initialState = userProfileLoggedIn\n    ? {\n          status: 'success',\n          error: null,\n          user: {\n              id: userProfileLoggedIn.id,\n              firstName: userProfileLoggedIn.firstName,\n              lastName: userProfileLoggedIn.lastName,\n          },\n          editedProfile: {\n              firstName: null,\n              lastName: null,\n              status: 'void',\n          },\n      }\n    : resetState\n\nexport function getUserProfile(token) {\n    return async (dispatch, getState) => {\n        const status = selectProfile(getState()).status\n        if (status === 'running') {\n            return\n        }\n        dispatch(actions.running())\n\n        // Add a sleep delay to show loadSpinner before axios call\n        await new Promise((r) => setTimeout(r, 800))\n\n        try {\n            const response = await axios.post(\n                apiUrl + `/user/profile`,\n                {},\n                { headers: { Authorization: `Bearer ${token}` } },\n                { timeout: 5000 }\n            )\n            const data = {\n                id: response.data.body._id,\n                firstName: response.data.body.firstName,\n                lastName: response.data.body.lastName,\n            }\n            dispatch(actions.success({ data: data }))\n\n            // if the user has chosen remember option profile informations are stored in localstorage to prevent logout on refresh\n            if (localStorage.getItem('user_loggedIn')) {\n                localStorage.setItem(\n                    'user_profile',\n                    JSON.stringify({\n                        firstName: data.firstName,\n                        lastName: data.lastName,\n                    })\n                )\n            }\n        } catch (error) {\n            try {\n                const errorMessage = error.response.data.message\n                dispatch(\n                    actions.failed({\n                        error: errorMessage,\n                    })\n                )\n            } catch {\n                dispatch(\n                    actions.failed({\n                        error: 'Error: Backend is not active',\n                    })\n                )\n            }\n        }\n    }\n}\n\nexport function updateUserProfile(token, firstName, lastName) {\n    return async (dispatch, getState) => {\n        const editedProfile = selectProfile(getState()).editedProfile\n        const status = editedProfile.status\n        if (status === 'updating') {\n            return\n        }\n        dispatch(actions.updating({ firstName: firstName, lastName: lastName }))\n\n        // Add a sleep delay to show loadSpinner before axios call\n        await new Promise((r) => setTimeout(r, 800))\n\n        try {\n            const response = await axios.put(\n                apiUrl + `/user/profile`,\n                {\n                    firstName: firstName,\n                    lastName: lastName,\n                },\n                { headers: { Authorization: `Bearer ${token}` } },\n                { timeout: 5000 }\n            )\n            const data = response.data\n            dispatch(\n                actions.updated({ firstName: firstName, lastName: lastName })\n            )\n\n            // if the user has chosen remember option profile informations are stored in localstorage to prevent logout on refresh\n            if (localStorage.getItem('user_profile')) {\n                localStorage.setItem(\n                    'user_profile',\n                    JSON.stringify({\n                        firstName: firstName,\n                        lastName: lastName,\n                    })\n                )\n            }\n        } catch (error) {\n            try {\n                const errorMessage = error.response.data.message\n                dispatch(\n                    actions.updateFailed({\n                        error: errorMessage,\n                    })\n                )\n            } catch {\n                dispatch(\n                    actions.updateFailed({\n                        error: 'Error: Backend is not active',\n                    })\n                )\n            }\n        }\n    }\n}\n\nconst { actions, reducer } = createSlice({\n    name: 'profile',\n    initialState: initialState,\n    reducers: {\n        running: (draft, action) => {\n            if (draft.status === 'void' || draft.status === 'success') {\n                draft.status = 'running'\n                return\n            }\n            if (draft.status === 'failed') {\n                draft.error = null\n                draft.status = 'running'\n                return\n            }\n            return\n        },\n        success: (draft, action) => {\n            if (draft.status === 'running') {\n                draft.user = action.payload.data\n                draft.status = 'success'\n                return\n            }\n            return\n        },\n        failed: (draft, action) => {\n            if (draft.status === 'running') {\n                draft.error = action.payload.error\n                draft.status = 'failed'\n                return\n            }\n            return\n        },\n        updating: (draft, action) => {\n            if (\n                draft.editedProfile.status === 'updated' ||\n                draft.editedProfile.status === 'void'\n            ) {\n                draft.editedProfile.firstName = action.payload.firstName\n                draft.editedProfile.lastName = action.payload.lastName\n                draft.editedProfile.status = 'updating'\n                return\n            }\n            if (draft.editedProfile.status === 'updateFailed') {\n                draft.editedProfile.firstName = action.payload.firstName\n                draft.editedProfile.lastName = action.payload.lastName\n                draft.editedProfile.error = null\n                draft.editedProfile.status = 'updating'\n                return\n            }\n            return\n        },\n        updated: (draft, action) => {\n            if (draft.editedProfile.status === 'updating') {\n                draft.editedProfile.status = 'updated'\n                draft.user.firstName = action.payload.firstName\n                draft.user.lastName = action.payload.lastName\n                return\n            }\n            return\n        },\n        updateFailed: (draft, action) => {\n            if (draft.editedProfile.status === 'updating') {\n                draft.editedProfile.error = action.payload.error\n                draft.editedProfile.status = 'updateFailed'\n                return\n            }\n            return\n        },\n        newUpdate: (draft, action) => {\n            if (draft.editedProfile.status !== 'void') {\n                draft.editedProfile = initialState.editedProfile\n                return\n            }\n            return\n        },\n        logout: () => resetState,\n    },\n})\n\nexport default reducer\nexport const { newUpdate, logout } = actions\n","import styled from 'styled-components'\nimport mediaQuery from '../utils/style/mediaQuery'\nimport Button from '../components/Button'\nimport colors from '../utils/style/color'\n\nconst AccountCardContainer = styled.section`\n    display: flex;\n    justify-content: space-between;\n    align-items: center;\n    border: 1px solid black;\n    background-color: white;\n    width: 80%;\n    margin: 0 2rem;\n    flex-direction: column;\n    padding: 1.5rem;\n    box-sizing: border-box;\n    text-align: left;\n    margin-bottom: 2rem;\n    border-radius: 3px;\n    ${mediaQuery.min.tablet`\n        flex-direction: row;\n    `}\n`\n\nconst AccountContentWrapper = styled.div`\n    width: 100%;\n    flex: 1;\n    color: ${colors.secondary};\n    &.wrapper-button {\n        ${mediaQuery.min.tablet`\n            flex: 0;\n        `}\n    }\n`\n\nconst AccountAmount = styled.p`\n    margin: 0;\n    font-size: 2.5rem;\n    font-weight: bold;\n`\n\nconst AccountAmountDescription = styled.p`\n    margin: 0;\n`\n\nconst AccountTitle = styled.h3`\n    margin: 0;\n    padding: 0;\n    font-size: 1rem;\n    font-weight: normal;\n`\n\nconst AccountButtonTransaction = styled(Button)`\n    width: 100%;\n    padding: 10px;\n    font-size: 1.1rem;\n    font-weight: bold;\n    margin-top: 1rem;\n    ${mediaQuery.min.tablet`\n        width: 200px;\n    `}\n`\n\nexport default function AccountCard({\n    accountNumber,\n    accountTitle,\n    accountAmount,\n    accountCurrency,\n    accountDescription,\n}) {\n    return (\n        <AccountCardContainer>\n            <AccountContentWrapper>\n                <AccountTitle>\n                    {`${accountTitle} (XX${accountNumber.slice(-4)})`}\n                </AccountTitle>\n                <AccountAmount>\n                    {accountCurrency}\n                    {accountAmount.toLocaleString('en')}\n                </AccountAmount>\n                <AccountAmountDescription>\n                    {accountDescription}\n                </AccountAmountDescription>\n            </AccountContentWrapper>\n            <AccountContentWrapper className=\"wrapper-button\">\n                <AccountButtonTransaction buttonText=\"View transaction\" />\n            </AccountContentWrapper>\n        </AccountCardContainer>\n    )\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport styled from 'styled-components'\n\nconst ModalContainer = styled.div`\n    position: fixed;\n    left: 0;\n    top: 0;\n    right: 0;\n    bottom: 0;\n    background-color: rgba(0, 0, 0, 0.5);\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    transition: all 0.3s ease-in-out;\n    opacity: 0;\n    pointer-events: none;\n    z-index: 99;\n    ${(props) => {\n        if (props.displayModal) {\n            return `\n                opacity: 1;\n                pointer-events: visible;\n            `\n        }\n    }}\n`\n\nconst ModalContent = styled.div`\n    width: 500px;\n    background-color: #fff;\n    border-radius: 3px;\n    overflow: hidden;\n    margin: 2rem 2rem 3rem;\n    transition: all 0.3s ease-in-out;\n    transform: translateY(-500px);\n    ${(props) => {\n        if (props.displayModal) {\n            return `\n                transform: translateY(0px);\n            `\n        }\n    }}\n`\n\nconst ModalHeader = styled.div`\n    padding: 10px;\n    display: flex;\n    justify-content: space-around;\n`\n\nconst ModalTitle = styled.h3`\n    margin: 1rem 0 0;\n    font-size: 1.5rem;\n`\n\nconst ModalBody = styled.div`\n    padding: 10px;\n    border-top: 1px solid #eee;\n    border-bottom: 1px solid #eee;\n`\n\nfunction Modal({ title, onClose, children, displayModal, className }) {\n    return ReactDOM.createPortal(\n        <ModalContainer className={className} displayModal={displayModal}>\n            <ModalContent\n                onClick={(e) => e.stopPropagation()}\n                displayModal={displayModal}\n            >\n                <ModalHeader>\n                    <ModalTitle>{title}</ModalTitle>\n                </ModalHeader>\n                <ModalBody className=\"modal-body\">{children}</ModalBody>\n            </ModalContent>\n        </ModalContainer>,\n        document.getElementById('root')\n    )\n}\n\nexport default Modal\n","import React, { useEffect } from 'react'\nimport ReactDOM from 'react-dom'\nimport Button from './Button'\nimport styled from 'styled-components'\nimport Modal from './Modal'\nimport colors from '../utils/style/color'\nimport { useSelector, useDispatch } from 'react-redux'\nimport { selectProfile, selectAuthentication } from '../utils/selectors'\nimport Input from '../components/Input'\nimport mediaQuery from '../utils/style/mediaQuery'\nimport { updateUserProfile } from '../features/profile'\nimport { useState } from 'react'\nimport LoadSpinner from '../components/LoadSpinner'\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport {\n    faCheckCircle,\n    faTimesCircle,\n    faInfoCircle,\n} from '@fortawesome/free-solid-svg-icons'\n\nconst ModalButton = styled(Button)`\n    width: 100%;\n    height: 2.5rem;\n    padding: 2px 12px;\n    font-size: 1rem;\n    font-weight: bold;\n    margin: 0.5rem 0.5rem 1rem;\n`\n\nconst FormEditProfile = styled.form`\n    padding: 8px 12px;\n    margin: 1rem 0.5rem 0;\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n`\nconst FormButtonsContainer = styled.div`\n    display: flex;\n    justify-content: center;\n    flex-direction: row;\n    width: 100%;\n    align-items: center;\n    margin: 1rem 0.5rem 0;\n`\n\nconst ModalConfirmMessage = styled.div`\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n    justify-content: center;\n    & br {\n        display: block;\n        margin: 1rem 0;\n        content: ' ';\n    }\n    & strong {\n        font-size: 1.2rem;\n    }\n`\nconst IconConfirmMessage = styled(FontAwesomeIcon)`\n    margin: 0rem 1rem 1rem;\n`\n\nfunction EditProfileModal({ title, onClose, children, displayModal }) {\n    //get state Redux authentication and profile\n    const authentication = useSelector(selectAuthentication)\n    const profile = useSelector(selectProfile)\n    const dispatch = useDispatch()\n\n    //state for newProfile informations typed by user\n    const initialStateNewProfile = {\n        key: Date.now(),\n        newFirstName: null,\n        newLastName: null,\n    }\n    const [newProfile, setNewProfile] = useState(initialStateNewProfile)\n    const { newFirstName, newLastName } = newProfile\n    const currentFirstName = profile.user.firstName\n    const currentLastName = profile.user.lastName\n\n    //state for hide or display confirm message\n    const [displayConfirmMessage, setDisplayConfirmMessage] = useState(false)\n\n    // message to display if there is no changes\n    const noChangesMessage =\n        'No modification has been made so your first and last name will not be modified'\n    const noChanges =\n        profile.editedProfile.status === 'void' &&\n        ((!newFirstName && !newLastName) ||\n            (newFirstName === currentFirstName &&\n                newLastName === currentLastName) ||\n            (newLastName === currentLastName && !newFirstName) ||\n            (newFirstName === currentFirstName && !newLastName))\n\n    const isUpdating = profile.editedProfile.status === 'updating'\n    const isError = profile.editedProfile.status === 'updateFailed'\n\n    // function to update newProfile state after each changes on inputs newFirstName & newLastName\n    function handleChangeText(e) {\n        const { name, value } = e.target\n        setNewProfile((newProfile) => ({ ...newProfile, [name]: value }))\n    }\n\n    // function to save changes and update profile state on success update\n    async function saveAndUpdateProfile() {\n        dispatch(\n            updateUserProfile(\n                authentication.token,\n                newFirstName || profile.user.firstName,\n                newLastName || profile.user.lastName\n            )\n        )\n    }\n\n    function onSubmitForm(e) {\n        e.preventDefault()\n        if (newFirstName === '' || newLastName === '') {\n            return false\n        }\n        setDisplayConfirmMessage(true)\n    }\n\n    async function closeModalAndReset() {\n        onClose()\n        await setTimeout(function () {\n            setNewProfile(initialStateNewProfile)\n            setDisplayConfirmMessage(false)\n        }, 1000)\n    }\n\n    return (\n        <Modal\n            title=\"Edit Profile\"\n            onClose={onClose}\n            displayModal={displayModal}\n            className={'modal'}\n            key={newProfile.key}\n        >\n            <FormEditProfile\n                onSubmit={onSubmitForm}\n                onReset={(e) => e.preventDefault()}\n                noValidate\n            >\n                {displayConfirmMessage ? (\n                    <>\n                        <ModalConfirmMessage>\n                            {/* Message if no changes to update */}\n                            {noChanges && (\n                                <>\n                                    <IconConfirmMessage\n                                        icon={faInfoCircle}\n                                        size=\"4x\"\n                                        color={colors.primaryLight}\n                                    />\n                                    <span> {noChangesMessage} </span>\n                                </>\n                            )}\n\n                            {/* Confirm Message before update */}\n                            {!noChanges &&\n                                profile.editedProfile.status === 'void' && (\n                                    <span>\n                                        {`Are you sure you want to update your profile\n                                with this new name ? `}\n                                        <br />\n                                        <strong>\n                                            {newFirstName ||\n                                                profile.user.firstName}{' '}\n                                            {newLastName ||\n                                                profile.user.lastName}\n                                        </strong>\n                                    </span>\n                                )}\n\n                            {/* Confirm Message on updating (loadspinner) */}\n                            {isUpdating && (\n                                <LoadSpinner\n                                    colorOfBars={colors.primaryLight}\n                                    numberOfBars={4}\n                                    sizeRatio={1}\n                                    animationSpeed={6}\n                                />\n                            )}\n\n                            {/* Confirm Message on update success */}\n                            {profile.editedProfile.status === 'updated' && (\n                                <>\n                                    <IconConfirmMessage\n                                        icon={faCheckCircle}\n                                        size=\"4x\"\n                                        color={colors.primaryLight}\n                                    />\n                                    <span>{`Your profile has been updated with success`}</span>\n                                </>\n                            )}\n\n                            {/* Confirm Message on update failed */}\n                            {profile.editedProfile.status ===\n                                'updateFailed' && (\n                                <>\n                                    <IconConfirmMessage\n                                        icon={faTimesCircle}\n                                        size=\"4x\"\n                                        color={colors.redDark}\n                                    />\n                                    <span>\n                                        <strong>{`... We are sorry`}</strong>\n                                        <br />\n                                        {`An error has occured, please retry later.`}\n                                    </span>\n                                </>\n                            )}\n                        </ModalConfirmMessage>\n\n                        <FormButtonsContainer>\n                            <ModalButton\n                                buttonText={\n                                    noChanges ||\n                                    profile.editedProfile.status ===\n                                        'updated' ||\n                                    profile.editedProfile.status ===\n                                        'updateFailed'\n                                        ? 'Close'\n                                        : 'Cancel'\n                                }\n                                onClick={closeModalAndReset}\n                                buttonType=\"reset\"\n                            />\n                            {!noChanges &&\n                                profile.editedProfile.status === 'void' && (\n                                    <ModalButton\n                                        onClick={saveAndUpdateProfile}\n                                        buttonText={'OK'}\n                                    />\n                                )}\n                        </FormButtonsContainer>\n                    </>\n                ) : (\n                    <>\n                        <Input\n                            inputType=\"text\"\n                            inputId=\"newFirstName\"\n                            inputLabel=\"New First Name\"\n                            inputName=\"newFirstName\"\n                            inputValue={newFirstName}\n                            inputDefaultValue={profile.user.firstName}\n                            inputEvents={{ onChange: handleChangeText }}\n                            isRequired=\"true\"\n                            isInvalid={newFirstName === ''}\n                            isInvalidText={'First Name is required'}\n                        ></Input>\n                        <Input\n                            inputType=\"text\"\n                            inputId=\"newLastName\"\n                            inputLabel=\"New Last Name\"\n                            inputName=\"newLastName\"\n                            inputValue={newLastName}\n                            inputDefaultValue={profile.user.lastName}\n                            inputEvents={{ onChange: handleChangeText }}\n                            isRequired=\"true\"\n                            isInvalid={newLastName === ''}\n                            isInvalidText={'Last Name is required'}\n                        ></Input>\n                        <FormButtonsContainer>\n                            <ModalButton\n                                buttonText={'Cancel'}\n                                onClick={closeModalAndReset}\n                                buttonType=\"reset\"\n                            />\n                            <ModalButton\n                                buttonText={'OK'}\n                                buttonType=\"submit\"\n                            />\n                        </FormButtonsContainer>\n                    </>\n                )}\n            </FormEditProfile>\n        </Modal>\n    )\n}\n\nexport default EditProfileModal\n","import { getUserProfile, updateUserProfile } from '../features/profile'\nimport { useSelector, useDispatch } from 'react-redux'\nimport { selectAuthentication, selectProfile } from '../utils/selectors'\nimport { useEffect, useState } from 'react'\nimport LoadSpinner from '../components/LoadSpinner'\nimport styled from 'styled-components'\nimport colors from '../utils/style/color'\nimport Button from '../components/Button'\nimport AccountCard from '../components/AccountCard'\nimport EditProfileModal from '../components/EditProfileModal'\nimport { newUpdate } from '../features/profile'\n\nconst ProfilePageContent = styled.main`\n    background-color: ${colors.backgroundDark};\n    display: flex;\n    justify-content: center;\n    align-items: flex-start;\n    ${(props) => {\n        if (props.loading === 'true') {\n            return `align-items: center;`\n        }\n    }}\n`\nconst ProfilePageHeader = styled.div`\n    color: white;\n    margin: 2rem;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    flex-direction: column;\n    width: 100%;\n    max-width: 1000px;\n`\n\nconst EditButton = styled(Button)`\n    border-color: ${colors.primaryLight};\n    background-color: ${colors.primaryLight};\n    color: white;\n    font-weight: bold;\n    padding: 10px 20px;\n    margin-bottom: 2rem;\n`\n\nconst accountData = [\n    {\n        number: '1234567898349',\n        title: 'Argent Bank Checking',\n        amount: 2082.79,\n        currency: '$',\n        description: 'Available Balance',\n    },\n    {\n        number: '1234567896712',\n        title: 'Argent Bank Savings',\n        amount: 10928.42,\n        currency: '$',\n        description: 'Available Balance',\n    },\n    {\n        number: '1234567898349',\n        title: 'Argent Bank Credit Card',\n        amount: 184.3,\n        currency: '$',\n        description: 'Current Balance',\n    },\n]\n\nexport default function ProfilePage() {\n    // get Redux state for authentication\n    const dispatch = useDispatch()\n    const authentication = useSelector(selectAuthentication)\n    const profile = useSelector(selectProfile)\n\n    useEffect(() => {\n        if (\n            profile.status !== 'success' &&\n            !localStorage.getItem('user_profile')\n        ) {\n            dispatch(getUserProfile(authentication.token))\n        }\n    }, [dispatch, authentication.token])\n\n    const [displayEditProfileModal, setDisplayEditProfileModal] =\n        useState(false)\n\n    return (\n        <ProfilePageContent\n            loading={profile.status === 'running' ? 'true' : 'false'}\n        >\n            {profile.status === 'running' ? (\n                <LoadSpinner\n                    colorOfBars={colors.primaryLight}\n                    numberOfBars={4}\n                    sizeRatio={1.5}\n                    animationSpeed={4}\n                />\n            ) : (\n                <ProfilePageHeader>\n                    <h1>\n                        {'Welcome back'}\n                        <br />\n                        {`${profile.user.firstName} ${profile.user.lastName}!`}\n                    </h1>\n                    <EditButton\n                        buttonText=\"Edit Name\"\n                        onClick={() => {\n                            setDisplayEditProfileModal(true)\n                            dispatch(newUpdate())\n                        }}\n                    />\n                    {accountData.map((elt, index) => (\n                        <AccountCard\n                            accountNumber={elt.number}\n                            accountTitle={elt.title}\n                            accountAmount={elt.amount}\n                            accountCurrency={elt.currency}\n                            key={index}\n                        />\n                    ))}\n                </ProfilePageHeader>\n            )}\n            <EditProfileModal\n                title=\"Edit Profile\"\n                onClose={() => {\n                    setDisplayEditProfileModal(false)\n                }}\n                displayModal={displayEditProfileModal}\n            ></EditProfileModal>\n        </ProfilePageContent>\n    )\n}\n","export default __webpack_public_path__ + \"static/media/argentBankLogo.e031a16c.png\";","import logo from '../assets/argentBankLogo.png'\nimport colors from '../utils/style/color'\nimport styled from 'styled-components'\nimport { Link } from 'react-router-dom'\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { faUserCircle } from '@fortawesome/free-solid-svg-icons'\nimport { faSignOutAlt } from '@fortawesome/free-solid-svg-icons'\nimport { useSelector, useDispatch } from 'react-redux'\nimport { selectAuthentication, selectProfile } from '../utils/selectors'\nimport { logout } from '../features/authentication'\nimport { logout as logoutProfile } from '../features/profile'\n\nconst HomeLogo = styled.img`\n    max-width: 100%;\n    width: 200px;\n`\n\nconst StyledLink = styled(Link)`\n    color: ${colors.secondary};\n    font-weight: bold;\n    color: #2c3e50;\n    margin-right: 0.5rem;\n    display: flex;\n    flex-wrap: wrap;\n    justify-content: center;\n`\n\nconst Icon = styled(FontAwesomeIcon)`\n    margin: 0px 5px;\n`\n\nconst NavContainer = styled.nav`\n    display: flex;\n    justify-content: space-between;\n    align-items: center;\n    padding: 5px min(20px, 2vw);\n\n    & .main-nav-item {\n        margin-right: 0.5rem;\n        &:hover {\n            text-decoration: underline;\n        }\n    }\n\n    & .main-nav-logo {\n        display: flex;\n        align-items: center;\n    }\n`\nconst LinkContainer = styled.div`\n    display: flex;\n`\n\nfunction MainNav() {\n    const authentication = useSelector(selectAuthentication)\n    const profile = useSelector(selectProfile)\n    const dispatch = useDispatch()\n\n    const logoutUser = () => {\n        dispatch(logout())\n        dispatch(logoutProfile())\n    }\n    return (\n        <NavContainer>\n            <Link to=\"/\" className=\"main-nav-logo\">\n                <HomeLogo src={logo} alt=\"Argent Bank Logo\" />\n            </Link>\n            <LinkContainer>\n                <StyledLink to=\"/sign-in\">\n                    <Icon icon={faUserCircle} size=\"lg\" />\n                    {authentication.status === 'success'\n                        ? profile.user.firstName\n                        : 'Sign In'}\n                </StyledLink>\n                {authentication.status === 'success' && (\n                    <StyledLink to=\"/\" onClick={() => logoutUser()}>\n                        <Icon icon={faSignOutAlt} size=\"lg\" />\n                        Sign Out\n                    </StyledLink>\n                )}\n            </LinkContainer>\n        </NavContainer>\n    )\n}\n\nexport default MainNav\n","import MainNav from './MainNav'\n\nfunction Header() {\n    return (\n        <header>\n            <MainNav />\n        </header>\n    )\n}\n\nexport default Header\n","import styled from 'styled-components'\nimport colors from '../utils/style/color'\n\nconst FooterContainer = styled.footer`\n    display: flex;\n    justify-content: center;\n    border-top: 2px solid ${colors.backgroundLight};\n    padding: 2vh 0 1.5vh;\n`\n\nfunction Footer() {\n    return (\n        <FooterContainer>\n            <p>{`Copyright ${new Date().getFullYear()} Argent Bank`}</p>\n        </FooterContainer>\n    )\n}\n\nexport default Footer\n","import {\n    BrowserRouter as Router,\n    Route,\n    Switch,\n    Redirect,\n} from 'react-router-dom'\nimport { useSelector } from 'react-redux'\nimport { selectAuthentication } from '../utils/selectors'\nimport GlobalStyle from '../utils/style/GlobalStyle'\nimport HomePage from '../pages/HomePage'\nimport LoginPage from '../pages/LoginPage'\nimport ProfilePage from '../pages/ProfilePage'\nimport Header from './Header'\nimport Footer from './Footer'\n\nexport default function App() {\n    const authentication = useSelector(selectAuthentication)\n    return (\n        <Router>\n            <GlobalStyle />\n            <Header />\n            <Switch>\n                <Route exact path=\"/\">\n                    {authentication.status !== 'success' &&\n                    !localStorage.getItem('user_loggedIn') ? (\n                        <HomePage />\n                    ) : (\n                        <Redirect from=\"/\" to=\"/profile\" />\n                    )}\n                </Route>\n                <Route exact path=\"/sign-in\">\n                    {authentication.status !== 'success' &&\n                    !localStorage.getItem('user_loggedIn') ? (\n                        <LoginPage />\n                    ) : (\n                        <Redirect from=\"/sign-in\" to=\"/profile\" />\n                    )}\n                </Route>\n                {(authentication.status === 'success' ||\n                    localStorage.getItem('user_loggedIn')) && (\n                    <Route exact path=\"/profile\">\n                        <ProfilePage />\n                    </Route>\n                )}\n                <Redirect\n                    from=\"*\"\n                    to={authentication.status === 'success' ? '/profile' : '/'}\n                />\n            </Switch>\n            <Footer />\n        </Router>\n    )\n}\n","// Data used for mocking (for tests and development)\nexport let users = [\n    {\n        _id: 1,\n        firstName: 'Tony',\n        lastName: 'Stark',\n        email: 'tony@stark.com',\n        password: 'password123',\n    },\n    {\n        _id: 2,\n        firstName: 'Steve',\n        lastName: 'Rogers',\n        email: 'steve@rogers.com',\n        password: 'password456',\n    },\n]\n","import { rest } from 'msw'\nimport { users } from './mockedData'\nimport { apiUrl } from '../utils/config/config'\nimport jwt from 'jsonwebtoken'\n\n// handlers for mocking api calls (for tests and development without backend)\nexport const handlers = [\n    rest.post(apiUrl + '/user/login', loginUser),\n    rest.post(apiUrl + '/user/profile', getUserWithToken),\n    rest.put(apiUrl + '/user/profile', updateUserWithToken),\n]\n\nfunction loginUser(req, res, ctx) {\n    const { email, password } = req.body\n    const ctxDelay = 500\n    let ctxStatus = null\n    let ctxJSON = null\n\n    // find if any user matches login\n    let user = users.find((user) => {\n        return user.email === email\n    })\n\n    if (!user) {\n        ctxStatus = 400\n        ctxJSON = { message: 'Error: User not found!' }\n    } else {\n        const isValidPassword = password === user.password\n        if (!isValidPassword) {\n            ctxStatus = 400\n            ctxJSON = { message: 'Error: Password is invalid' }\n        } else {\n            ctxStatus = 200\n            const token = jwt.sign(\n                { id: user._id },\n                process.env.REACT_APP_SECRET_KEY || 'default-secret-key',\n                { expiresIn: '1d' }\n            )\n            ctxJSON = { body: { token: token } }\n        }\n    }\n    return res(ctx.delay(ctxDelay), ctx.status(ctxStatus), ctx.json(ctxJSON))\n}\n\nfunction getUserWithToken(req, res, ctx) {\n    validateToken(req, res, ctx)\n    return getUserProfile(req, res, ctx)\n}\n\nfunction updateUserWithToken(req, res, ctx) {\n    validateToken(req, res, ctx)\n    return updateUserProfile(req, res, ctx)\n}\n\nfunction validateToken(req, res, ctx) {\n    const ctxDelay = 500\n    let ctxStatus = null\n    let ctxJSON = null\n    try {\n        const userToken = req.headers._headers.authorization\n            .split('Bearer')[1]\n            .trim()\n        const decodedToken = jwt.verify(\n            userToken,\n            process.env.REACT_APP_SECRET_KEY || 'default-secret-key'\n        )\n        console.log('token verified')\n        return next()\n    } catch (error) {\n        if (!req.headers._headers.authorization) {\n            ctxStatus = 400\n            ctxJSON = { message: 'Token is missing from header' }\n        }\n    }\n    return res(ctx.delay(ctxDelay), ctx.status(ctxStatus), ctx.json(ctxJSON))\n}\n\nfunction getUserProfile(req, res, ctx) {\n    const ctxDelay = 500\n    let ctxStatus = null\n    let ctxJSON = null\n\n    const jwtToken = req.headers._headers.authorization\n        .split('Bearer')[1]\n        .trim()\n    const decodedJwtToken = jwt.decode(jwtToken)\n    const user = users.find((user) => {\n        return user._id === decodedJwtToken.id\n    })\n\n    if (!user) {\n        ctxStatus = 400\n        ctxJSON = { message: 'User not found' }\n    } else {\n        ctxStatus = 200\n        ctxJSON = user\n        ctxJSON = { body: user }\n        console.log(ctxJSON)\n    }\n    return res(ctx.delay(ctxDelay), ctx.status(ctxStatus), ctx.json(ctxJSON))\n}\n\nfunction updateUserProfile(req, res, ctx) {\n    const ctxDelay = 500\n    let ctxStatus = null\n    let ctxJSON = null\n\n    const jwtToken = req.headers._headers.authorization\n        .split('Bearer')[1]\n        .trim()\n    const decodedJwtToken = jwt.decode(jwtToken)\n    const user = users.find((user) => {\n        return user._id === decodedJwtToken.id\n    })\n\n    if (!user) {\n        ctxStatus = 400\n        ctxJSON = { message: 'User not found' }\n    } else {\n        ctxStatus = 200\n        ctxJSON = user\n        ctxJSON = { body: user }\n        console.log(ctxJSON)\n    }\n    return res(ctx.delay(ctxDelay), ctx.status(ctxStatus), ctx.json(ctxJSON))\n}\n","import { setupWorker } from 'msw'\nimport { handlers } from './handlers'\n\n// This configures a Service Worker with the given request handlers.\nexport const worker = setupWorker(...handlers)\n","import { configureStore } from '@reduxjs/toolkit'\nimport authenticationReducer from '../features/authentication'\nimport profileReducer from '../features/profile'\n\nconst store = configureStore({\n    reducer: {\n        authentication: authenticationReducer,\n        profile: profileReducer,\n    },\n})\n\nexport default store\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport reportWebVitals from './reportWebVitals'\nimport App from './components/App'\nimport {worker} from './_mocks/browser'\nimport { Provider } from 'react-redux'\nimport store from './utils/store'\n\n// This script is used to active mock on dev env (if env param REACT_APP_API_MOCKING is enabled) \nif (process.env.NODE_ENV === 'development' && process.env.REACT_APP_API_MOCKING === 'enabled') {\n    const { worker } = require('./_mocks/browser')\n    worker.start()\n}\n\nReactDOM.render(\n    <Provider store={store}>\n        <React.StrictMode>\n            <App />\n        </React.StrictMode>\n    </Provider>, \n    document.getElementById('root')\n)\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals()\n"],"sourceRoot":""}